AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template for Alfred Brain data processing Lambda function'

Parameters:
  EnvironmentName:
    Type: String
    Default: dev
    Description: Environment name (dev, staging, prod)
    AllowedValues: 
      - dev
      - staging
      - prod
    
  S3BucketName:
    Type: String
    Description: S3 bucket name for storing processed data
    
  LambdaFunctionName:
    Type: String
    Default: AlfredBrainDataProcessor
    Description: Name of the Lambda function

  ScheduleExpression:
    Type: String
    Default: rate(1 day)
    Description: Schedule expression for the Lambda function (rate or cron expression)
    
  MongoDBURI:
    Type: String
    Description: MongoDB connection URI
    NoEcho: true

Resources:
  # IAM Role for Lambda
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${LambdaFunctionName}-ExecutionRole-${EnvironmentName}
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: !Sub ${LambdaFunctionName}-S3Access-${EnvironmentName}
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:PutObject'
                  - 's3:ListBucket'
                Resource:
                  - !Sub arn:aws:s3:::${S3BucketName}
                  - !Sub arn:aws:s3:::${S3BucketName}/*
        - PolicyName: !Sub ${LambdaFunctionName}-CloudWatchLogs-${EnvironmentName}
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${LambdaFunctionName}-${EnvironmentName}:*
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Application
          Value: AlfredBrain

  # Lambda function for data processing
  DataProcessorLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${LambdaFunctionName}-${EnvironmentName}
      Description: Processes wearable data, converts timestamps to UTC, and standardizes units
      Runtime: nodejs18.x
      Handler: processWearableData.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 300
      MemorySize: 512
      Environment:
        Variables:
          MONGODB_URI: !Ref MongoDBURI
          S3_BUCKET: !Ref S3BucketName
          NODE_ENV: !Ref EnvironmentName
      Code:
        ZipFile: |
          /**
           * Placeholder Lambda function
           * The actual code will be deployed separately
           */
          exports.handler = async (event) => {
            return {
              statusCode: 200,
              body: JSON.stringify('Deploy the actual Lambda code separately')
            };
          };
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Application
          Value: AlfredBrain

  # CloudWatch Event Rule to trigger Lambda on schedule
  DataProcessorScheduleRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub ${LambdaFunctionName}-Schedule-${EnvironmentName}
      Description: Schedule for wearable data processing
      ScheduleExpression: !Ref ScheduleExpression
      State: ENABLED
      Targets:
        - Id: DataProcessorLambdaTarget
          Arn: !GetAtt DataProcessorLambda.Arn
          Input: !Sub |
            {
              "source": "schedule",
              "environment": "${EnvironmentName}"
            }

  # Permission for CloudWatch Events to invoke the Lambda function
  DataProcessorSchedulePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref DataProcessorLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt DataProcessorScheduleRule.Arn

  # CloudWatch Alarm for Lambda errors
  DataProcessorErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ${LambdaFunctionName}-Errors-${EnvironmentName}
      AlarmDescription: Alarm if the wearable data processor Lambda function has errors
      Namespace: AWS/Lambda
      MetricName: Errors
      Dimensions:
        - Name: FunctionName
          Value: !Ref DataProcessorLambda
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: notBreaching

Outputs:
  DataProcessorLambdaArn:
    Description: ARN of the wearable data processor Lambda function
    Value: !GetAtt DataProcessorLambda.Arn
    Export:
      Name: !Sub ${AWS::StackName}-DataProcessorLambdaArn
      
  DataProcessorLambdaName:
    Description: Name of the wearable data processor Lambda function
    Value: !Ref DataProcessorLambda
    Export:
      Name: !Sub ${AWS::StackName}-DataProcessorLambdaName
      
  DataProcessorScheduleRuleArn:
    Description: ARN of the CloudWatch Event Rule for data processing
    Value: !GetAtt DataProcessorScheduleRule.Arn
    Export:
      Name: !Sub ${AWS::StackName}-DataProcessorScheduleRuleArn