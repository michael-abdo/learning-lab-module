AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template for TryTerra data fetching scheduler'

Parameters:
  EnvironmentName:
    Type: String
    Default: dev
    Description: Environment name (dev, staging, prod)
    
  LambdaFunctionName:
    Type: String
    Default: AlfredBrainTerraDataFetcher
    Description: Name of the Lambda function
    
  ScheduleExpression:
    Type: String
    Default: rate(6 hours)
    Description: Schedule expression for the Lambda function (rate or cron expression)
    
  BatchSize:
    Type: Number
    Default: 50
    Description: Number of users to process per Lambda invocation
    
  LambdaMemorySize:
    Type: Number
    Default: 512
    Description: Memory size for the Lambda function (MB)
    
  LambdaTimeout:
    Type: Number
    Default: 300
    Description: Timeout for the Lambda function (seconds)
    
  MongoDBSecretName:
    Type: String
    Default: alfred-brain/mongodb
    Description: Name of the AWS Secrets Manager secret containing MongoDB connection string
    
  TryTerraApiKey1:
    Type: String
    Default: runtheons-testing-zbnGQ364kw
    Description: TryTerra API Key 1
    
  TryTerraApiKey2:
    Type: String
    Default: LUgN_p9G8krf97q5Et3UHxBXetnDGFpx
    Description: TryTerra API Key 2 (Dev ID)

Resources:
  # IAM Role for the Lambda function
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${LambdaFunctionName}-ExecutionRole-${EnvironmentName}
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: SecretsManagerAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${MongoDBSecretName}*
        - PolicyName: LambdaVPCAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                  - ec2:DescribeSecurityGroups
                  - ec2:DescribeSubnets
                  - ec2:DescribeVpcs
                Resource: '*'

  # Lambda function for TryTerra data fetching
  TerraDataFetcherLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${LambdaFunctionName}-${EnvironmentName}
      Description: Fetches data from TryTerra API and stores it in MongoDB
      Runtime: nodejs18.x
      Handler: fetchTerraData.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: !Ref LambdaTimeout
      MemorySize: !Ref LambdaMemorySize
      Environment:
        Variables:
          MONGODB_SECRET_NAME: !Ref MongoDBSecretName
          TRYTERRA_API_KEY_1: !Ref TryTerraApiKey1
          TRYTERRA_API_KEY_2: !Ref TryTerraApiKey2
          NODE_ENV: !Ref EnvironmentName
      Code:
        ZipFile: |
          // This is a placeholder. The actual code will be deployed separately
          exports.handler = async (event) => {
            return {
              statusCode: 200,
              body: JSON.stringify('Deploy the actual Lambda code separately')
            };
          };
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Service
          Value: TryTerra

  # CloudWatch Event Rule for scheduling the Lambda function
  TerraDataSchedulerRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub ${LambdaFunctionName}-Scheduler-${EnvironmentName}
      Description: Scheduled rule for TryTerra data fetching
      ScheduleExpression: !Ref ScheduleExpression
      State: ENABLED
      Targets:
        - Id: TerraDataFetcherLambdaTarget
          Arn: !GetAtt TerraDataFetcherLambda.Arn
          Input: !Sub |
            {
              "batchSize": ${BatchSize},
              "skipUsers": 0,
              "environment": "${EnvironmentName}"
            }

  # Permission for CloudWatch Events to invoke the Lambda function
  TerraDataSchedulerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref TerraDataFetcherLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt TerraDataSchedulerRule.Arn

  # CloudWatch Alarm for Lambda errors
  TerraDataFetcherErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ${LambdaFunctionName}-Errors-${EnvironmentName}
      AlarmDescription: Alarm if the TryTerra data fetcher Lambda function has errors
      Namespace: AWS/Lambda
      MetricName: Errors
      Dimensions:
        - Name: FunctionName
          Value: !Ref TerraDataFetcherLambda
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: notBreaching

Outputs:
  TerraDataFetcherLambdaArn:
    Description: ARN of the TryTerra data fetcher Lambda function
    Value: !GetAtt TerraDataFetcherLambda.Arn
    Export:
      Name: !Sub ${AWS::StackName}-TerraDataFetcherLambdaArn
      
  TerraDataFetcherLambdaName:
    Description: Name of the TryTerra data fetcher Lambda function
    Value: !Ref TerraDataFetcherLambda
    Export:
      Name: !Sub ${AWS::StackName}-TerraDataFetcherLambdaName
      
  TerraDataSchedulerRuleArn:
    Description: ARN of the CloudWatch Event Rule for TryTerra data fetching
    Value: !GetAtt TerraDataSchedulerRule.Arn
    Export:
      Name: !Sub ${AWS::StackName}-TerraDataSchedulerRuleArn