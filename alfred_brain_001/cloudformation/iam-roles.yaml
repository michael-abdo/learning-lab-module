AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template for Alfred Brain IAM roles and policies'

Parameters:
  EnvironmentName:
    Type: String
    Default: dev
    Description: Environment name (dev, staging, prod)
    AllowedValues: 
      - dev
      - staging
      - prod
    
  DataBucketName:
    Type: String
    Description: Name of the S3 bucket containing application data

  LambdaFunctionName:
    Type: String
    Default: AlfredBrainProcessor
    Description: Name of the Lambda function that will access the S3 bucket
    
  ApiUserName:
    Type: String
    Default: alfred-brain-api
    Description: Username for API access to S3 resources

Resources:
  # Lambda execution role with S3 bucket access
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${LambdaFunctionName}-ExecutionRole-${EnvironmentName}
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: !Sub ${LambdaFunctionName}-S3Access-${EnvironmentName}
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:PutObject'
                  - 's3:ListBucket'
                Resource:
                  - !Sub arn:aws:s3:::${DataBucketName}
                  - !Sub arn:aws:s3:::${DataBucketName}/*
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${LambdaFunctionName}-${EnvironmentName}:*
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Application
          Value: AlfredBrain

  # API user for programmatic access to S3 resources
  ApiUser:
    Type: AWS::IAM::User
    Properties:
      UserName: !Sub ${ApiUserName}-${EnvironmentName}
      Policies:
        - PolicyName: !Sub ${ApiUserName}-S3Access-${EnvironmentName}
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:PutObject'
                  - 's3:ListBucket'
                Resource:
                  - !Sub arn:aws:s3:::${DataBucketName}
                  - !Sub arn:aws:s3:::${DataBucketName}/*
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Application
          Value: AlfredBrain

  # API access key (not recommended for production, use AWS Secrets Manager instead)
  ApiUserAccessKey:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName: !Ref ApiUser

Outputs:
  LambdaExecutionRoleName:
    Description: Name of the Lambda execution role
    Value: !Ref LambdaExecutionRole
    Export:
      Name: !Sub ${AWS::StackName}-LambdaExecutionRoleName
      
  LambdaExecutionRoleArn:
    Description: ARN of the Lambda execution role
    Value: !GetAtt LambdaExecutionRole.Arn
    Export:
      Name: !Sub ${AWS::StackName}-LambdaExecutionRoleArn
      
  ApiUserName:
    Description: Name of the API user
    Value: !Ref ApiUser
    Export:
      Name: !Sub ${AWS::StackName}-ApiUserName
      
  ApiUserAccessKeyId:
    Description: Access key ID for the API user
    Value: !Ref ApiUserAccessKey
    Export:
      Name: !Sub ${AWS::StackName}-ApiUserAccessKeyId

  ApiUserSecretAccessKey:
    Description: Secret access key for the API user
    Value: !GetAtt ApiUserAccessKey.SecretAccessKey
    Export:
      Name: !Sub ${AWS::StackName}-ApiUserSecretAccessKey