AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template for AWS Glue MongoDB crawler and ETL jobs'

Parameters:
  EnvironmentName:
    Type: String
    Default: dev
    Description: Environment name (dev, staging, prod)
    AllowedValues: 
      - dev
      - staging
      - prod
    
  MongoDBConnectionName:
    Type: String
    Default: alfred-brain-mongodb
    Description: Name for the AWS Glue MongoDB connection
    
  MongoDBURI:
    Type: String
    Description: MongoDB connection URI
    NoEcho: true
    
  DatabaseName:
    Type: String
    Default: documents
    Description: MongoDB database name
    
  CrawlerSchedule:
    Type: String
    Default: cron(0 */12 * * ? *)
    Description: Cron expression for crawler schedule (default is twice daily)
    
  ETLJobSchedule:
    Type: String
    Default: cron(30 */12 * * ? *)
    Description: Cron expression for ETL job schedule (default is twice daily, 30 minutes after crawler)
    
  GlueDatabaseName:
    Type: String
    Default: alfred_brain_data
    Description: Name for the AWS Glue Database
    
  S3BucketName:
    Type: String
    Description: S3 bucket name for ETL job scripts and temporary data storage
    
  GlueIAMRoleName:
    Type: String
    Default: AlfredBrainGlueRole
    Description: IAM role name for AWS Glue

Resources:
  # IAM Role for Glue
  GlueIAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${GlueIAMRoleName}-${EnvironmentName}
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: glue.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole
      Policies:
        - PolicyName: !Sub ${GlueIAMRoleName}-S3Access-${EnvironmentName}
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:PutObject'
                  - 's3:DeleteObject'
                  - 's3:ListBucket'
                Resource:
                  - !Sub arn:aws:s3:::${S3BucketName}
                  - !Sub arn:aws:s3:::${S3BucketName}/*
        - PolicyName: !Sub ${GlueIAMRoleName}-CloudWatchLogs-${EnvironmentName}
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: 'arn:aws:logs:*:*:*'
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Application
          Value: AlfredBrain

  # AWS Glue Database
  GlueDatabase:
    Type: AWS::Glue::Database
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseInput:
        Name: !Ref GlueDatabaseName
        Description: AWS Glue database for Alfred Brain data

  # AWS Glue Connection to MongoDB
  GlueMongoDBConnection:
    Type: AWS::Glue::Connection
    Properties:
      CatalogId: !Ref AWS::AccountId
      ConnectionInput:
        Name: !Ref MongoDBConnectionName
        Description: Connection to MongoDB for Alfred Brain
        ConnectionType: MONGODB
        ConnectionProperties:
          CONNECTION_URL: !Ref MongoDBURI
          # Extract username and password from MongoDB URI if available
          # Otherwise, leave them as empty strings which will allow for SSL/TLS connection
          USERNAME: ""
          PASSWORD: ""

  # AWS Glue Crawler for MongoDB - WearableData Collection
  WearableDataCrawler:
    Type: AWS::Glue::Crawler
    Properties:
      Name: !Sub alfred-brain-wearable-data-crawler-${EnvironmentName}
      Role: !GetAtt GlueIAMRole.Arn
      DatabaseName: !Ref GlueDatabaseName
      Description: AWS Glue crawler for MongoDB wearable data collection
      Schedule:
        ScheduleExpression: !Ref CrawlerSchedule
      Targets:
        MongoDBTargets:
          - ConnectionName: !Ref MongoDBConnectionName
            Path: !Sub ${DatabaseName}.wearabledatas
      SchemaChangePolicy:
        UpdateBehavior: UPDATE_IN_DATABASE
        DeleteBehavior: LOG
      Configuration: '{"mongodb": {"skipHeaders": true, "detectTimestamps": true, "detectSchema": true}}'
      Tags:
        Environment: !Ref EnvironmentName
        Application: AlfredBrain

  # AWS Glue Crawler for MongoDB - PerformancePlan Collection
  PerformancePlanCrawler:
    Type: AWS::Glue::Crawler
    Properties:
      Name: !Sub alfred-brain-performance-plan-crawler-${EnvironmentName}
      Role: !GetAtt GlueIAMRole.Arn
      DatabaseName: !Ref GlueDatabaseName
      Description: AWS Glue crawler for MongoDB performance plan collection
      Schedule:
        ScheduleExpression: !Ref CrawlerSchedule
      Targets:
        MongoDBTargets:
          - ConnectionName: !Ref MongoDBConnectionName
            Path: !Sub ${DatabaseName}.performance_plans
      SchemaChangePolicy:
        UpdateBehavior: UPDATE_IN_DATABASE
        DeleteBehavior: LOG
      Configuration: '{"mongodb": {"skipHeaders": true, "detectTimestamps": true, "detectSchema": true}}'
      Tags:
        Environment: !Ref EnvironmentName
        Application: AlfredBrain

  # AWS Glue Crawler for MongoDB - UserFitnessProfile Collection
  UserFitnessProfileCrawler:
    Type: AWS::Glue::Crawler
    Properties:
      Name: !Sub alfred-brain-user-fitness-profile-crawler-${EnvironmentName}
      Role: !GetAtt GlueIAMRole.Arn
      DatabaseName: !Ref GlueDatabaseName
      Description: AWS Glue crawler for MongoDB user fitness profile collection
      Schedule:
        ScheduleExpression: !Ref CrawlerSchedule
      Targets:
        MongoDBTargets:
          - ConnectionName: !Ref MongoDBConnectionName
            Path: !Sub ${DatabaseName}.user_fitness_profiles
      SchemaChangePolicy:
        UpdateBehavior: UPDATE_IN_DATABASE
        DeleteBehavior: LOG
      Configuration: '{"mongodb": {"skipHeaders": true, "detectTimestamps": true, "detectSchema": true}}'
      Tags:
        Environment: !Ref EnvironmentName
        Application: AlfredBrain

  # AWS Glue ETL Job - Normalize Wearable Data
  NormalizeWearableDataJob:
    Type: AWS::Glue::Job
    Properties:
      Name: !Sub alfred-brain-normalize-wearable-data-${EnvironmentName}
      Role: !GetAtt GlueIAMRole.Arn
      Description: ETL job to normalize wearable data, including UTC timestamp conversion and unit normalization
      Command:
        Name: glueetl
        ScriptLocation: !Sub s3://${S3BucketName}/glue/scripts/normalize_wearable_data.py
        PythonVersion: '3'
      DefaultArguments:
        '--TempDir': !Sub s3://${S3BucketName}/glue/temp/
        '--job-bookmark-option': 'job-bookmark-enable'
        '--enable-metrics': 'true'
        '--enable-continuous-cloudwatch-log': 'true'
        '--database_name': !Ref GlueDatabaseName
        '--wearable_data_table': 'wearabledatas'
        '--output_bucket': !Ref S3BucketName
        '--output_prefix': 'processed/wearable_data/'
      ExecutionProperty:
        MaxConcurrentRuns: 2
      MaxRetries: 1
      Timeout: 60
      GlueVersion: '3.0'
      NumberOfWorkers: 2
      WorkerType: 'G.1X'
      Tags:
        Environment: !Ref EnvironmentName
        Application: AlfredBrain

  # AWS Glue Trigger - Run ETL Job after Crawler Completes
  NormalizeWearableDataTrigger:
    Type: AWS::Glue::Trigger
    Properties:
      Name: !Sub alfred-brain-wearable-data-etl-trigger-${EnvironmentName}
      Description: Trigger to run wearable data normalization ETL job after crawler completes
      Type: SCHEDULED
      Schedule: !Ref ETLJobSchedule
      Actions:
        - JobName: !Ref NormalizeWearableDataJob
      Tags:
        Environment: !Ref EnvironmentName
        Application: AlfredBrain

Outputs:
  GlueDatabaseName:
    Description: Name of the AWS Glue Database
    Value: !Ref GlueDatabaseName
    Export:
      Name: !Sub ${AWS::StackName}-GlueDatabaseName
      
  WearableDataCrawlerName:
    Description: Name of the wearable data crawler
    Value: !Ref WearableDataCrawler
    Export:
      Name: !Sub ${AWS::StackName}-WearableDataCrawlerName
      
  NormalizeWearableDataJobName:
    Description: Name of the normalize wearable data ETL job
    Value: !Ref NormalizeWearableDataJob
    Export:
      Name: !Sub ${AWS::StackName}-NormalizeWearableDataJobName
      
  MongoDBConnectionName:
    Description: Name of the MongoDB connection
    Value: !Ref MongoDBConnectionName
    Export:
      Name: !Sub ${AWS::StackName}-MongoDBConnectionName